# -*- coding: utf-8 -*-
"""AI enhancing Job Recommendations .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lr-ARGC89vPwXMgQETLthletLvFQoSbu
"""

pip install scikit-learn pandas numpy tensorflow

import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer
from sqlalchemy.orm import Session
from ..models.job import Job as JobModel
from ..models.user import User as UserModel

def recommend_jobs_ai(user_id: int, db: Session):
    # Load user data
    user = db.query(UserModel).filter(UserModel.id == user_id).first()

    if not user:
        return []

    # Load job data
    jobs = db.query(JobModel).all()

    # Prepare job data as DataFrame
    job_df = pd.DataFrame([{
        'id': job.id,
        'title': job.title,
        'location': job.location,
        'salary': job.salary,
        'experience_required': job.experience_required
    } for job in jobs])

    # Feature engineering (title similarity, location matching)
    tfidf = TfidfVectorizer(stop_words='english')
    job_df['combined_features'] = job_df['title'] + " " + job_df['location']
    job_matrix = tfidf.fit_transform(job_df['combined_features'])

    # Calculate similarity (you can enhance with more features)
    similarity = cosine_similarity(job_matrix)

    # Return top 5 recommended jobs
    recommended_indices = similarity.argsort()[0][-5:]
    recommended_jobs = job_df.iloc[recommended_indices]

    return recommended_jobs.to_dict(orient="records")

@router.get("/ai-recommendations/{user_id}")
def ai_recommend_jobs(user_id: int, db: Session = Depends(get_db)):
    recommendations = recommend_jobs_ai(user_id, db)
    if not recommendations:
        raise HTTPException(status_code=404, detail="No recommendations found")
    return recommendations