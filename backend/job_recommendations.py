# -*- coding: utf-8 -*-
"""job recommendations.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RFdHvtdLhcjiNRtM1xLhqEh6OTwwjyRS

Job Management

Job Model
"""

from sqlalchemy import Column, Integer, String, Float
from ..database import Base

class Job(Base):
    __tablename__ = "jobs"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)
    description = Column(String)
    location = Column(String)
    salary = Column(Float)
    experience_required = Column(Integer)

"""Job Schema


"""

from pydantic import BaseModel

class JobBase(BaseModel):
    title: str
    description: str
    location: str
    salary: float
    experience_required: int

class JobCreate(JobBase):
    pass

class Job(JobBase):
    id: int

    class Config:
        orm_mode = True

"""Job API Endpoints"""

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from ..models.job import Job as JobModel
from ..schemas.job_schema import JobCreate, Job
from ..database import get_db

router = APIRouter()

@router.post("/jobs/", response_model=Job)
def create_job(job: JobCreate, db: Session = Depends(get_db)):
    db_job = JobModel(**job.dict())
    db.add(db_job)
    db.commit()
    db.refresh(db_job)
    return db_job

@router.get("/jobs/", response_model=List[Job])
def get_jobs(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    return db.query(JobModel).offset(skip).limit(limit).all()

@router.get("/jobs/{job_id}", response_model=Job)
def get_job(job_id: int, db: Session = Depends(get_db)):
    job = db.query(JobModel).filter(JobModel.id == job_id).first()
    if not job:
        raise HTTPException(status_code=404, detail="Job not found")
    return job

from .routers import users, jobs, iot

app.include_router(jobs.router, prefix="/api/jobs", tags=["Jobs"])

"""Recommendation Endpoint"""

@router.get("/recommendations/{user_id}", response_model=List[Job])
def recommend_jobs(user_id: int, db: Session = Depends(get_db)):
    # Placeholder logic: Match jobs based on experience requirement
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    jobs = db.query(JobModel).filter(JobModel.experience_required <= 3).all()  # Example logic
    return jobs