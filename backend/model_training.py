# -*- coding: utf-8 -*-
"""Model training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l_L4Vzq3OJ9LOgcspGyDSYBT-3QHNYe3
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder

# Load data
data = pd.read_csv('oee_data.csv')
X = data[['Availability', 'Performance', 'Quality']]
y = data['Downtime_Risk']

# Encode target labels
le = LabelEncoder()
y_encoded = le.fit_transform(y)

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

# Train model
model = DecisionTreeClassifier(max_depth=5)
model.fit(X_train, y_train)

# Save the model
import joblib
joblib.dump(model, 'oee_model.pkl')

""" Integrating the AI Model"""

import joblib

# Load model
model = joblib.load('oee_model.pkl')

def predict_risk(availability, performance, quality):
    input_data = [[availability, performance, quality]]
    risk = model.predict(input_data)[0]
    return risk

from fastapi import APIRouter
from ..optimize import predict_risk

router = APIRouter()

@router.post("/predict-risk/")
def predict_oee_risk(availability: float, performance: float, quality: float):
    risk = predict_risk(availability, performance, quality)
    return {"risk_level": risk}

"""Real-Time Optimization"""

def optimize_oee(availability, performance, quality):
    risk = predict_risk(availability, performance, quality)
    suggestions = {
        0: "No action needed",
        1: "Schedule preventive maintenance",
        2: "Optimize machine settings"
    }
    return suggestions[risk]

@router.post("/optimize/")
def get_optimization_suggestions(availability: float, performance: float, quality: float):
    suggestion = optimize_oee(availability, performance, quality)
    return {"suggestion": suggestion}

import asyncio
from fastapi import WebSocket
from ..optimize import optimize_oee

@app.websocket("/ws/oee")
async def oee_websocket(websocket: WebSocket):
    await websocket.accept()
    while True:
        # Example: Real-time OEE values (replace with actual values from DB)
        availability, performance, quality = 0.9, 0.85, 0.95
        oee = availability * performance * quality * 100
        suggestion = optimize_oee(availability, performance, quality)

        data = {
            "oee": oee,
            "availability": availability,
            "performance": performance,
            "quality": quality,
            "suggestion": suggestion
        }
        await websocket.send_json(data)
        await asyncio.sleep(5)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OEE Dashboard with AI Recommendations</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <h1>Real-Time OEE Dashboard</h1>
    <canvas id="oeeChart" width="400" height="200"></canvas>
    <p id="aiSuggestion"></p>

    <script>
        const ctx = document.getElementById('oeeChart').getContext('2d');
        const oeeChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'OEE (%)',
                    data: [],
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1,
                    fill: false
                }]
            },
            options: {
                scales: {
                    x: {
                        type: 'time',
                        time: { unit: 'minute' }
                    },
                    y: { beginAtZero: true }
                }
            }
        });

        const socket = new WebSocket('ws://localhost:8000/ws/oee');
        socket.onmessage = (event) => {
            const data = JSON.parse(event.data);
            document.getElementById('aiSuggestion').innerText = `AI Suggestion: ${data.suggestion}`;
            oeeChart.data.labels.push(new Date());
            oeeChart.data.datasets[0].data.push(data.oee);
            oeeChart.update();
        };
    </script>
</body>
</html>

@router.post("/feedback/")
def capture_feedback(suggestion: str, feedback: str):
    # Store feedback in a database or file
    with open("feedback_log.txt", "a") as f:
        f.write(f"{suggestion}: {feedback}\n")
    return {"message": "Feedback received"}

import pandas as pd
from sklearn.tree import DecisionTreeClassifier
import joblib

# Load new data with feedback
data = pd.read_csv('oee_feedback_data.csv')
X = data[['Availability', 'Performance', 'Quality']]
y = data['Downtime_Risk']

# Retrain model
model = DecisionTreeClassifier(max_depth=5)
model.fit(X, y)
joblib.dump(model, 'oee_model_updated.pkl')